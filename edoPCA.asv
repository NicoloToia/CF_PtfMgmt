clear;
close all; 
clc;

%% PART A 

% Load data from Excel files
prices = readtable('prices.xlsx');
capitalizations = readtable('capitalizations.xlsx');
caps = capitalizations{1,2:end};

% Extract dates and data
dates = prices{:,1}; % First column contains dates
prices_data = prices{:,2:end}; % Data starts from the second column

% Convert dates to MATLAB date format if needed
dates = datetime(dates);

% Filter prices for 2023
start_date = datetime(2023,1,1);
end_date = datetime(2023,12,31);
prices_2023 = prices_data(dates >= start_date & dates <= end_date, :);
start_test = datetime(2024, 1, 1);
prices_2024 = prices_data(dates >= start_test, :);

% Names
assetNames = capitalizations.Properties.VariableNames(2:end);

% Calculate daily returns for each index in 2023
returns_2023 = tick2ret(prices_2023);

% Calculate mean returns and covariance matrix
mean_returns = mean(returns_2023)';
cov_matrix = cov(returns_2023);

% Define number of assets
num_assets = length(mean_returns);

cyclical = ["ConsumerDiscretionary", "Financials", "Materials", "RealEstate", "Industrials"];
defensive = ["ConsumerStaples", "Utilities", "HealthCare"];
sensible = ["Energy", "InformationTechnology", "CommunicationServices"];
factor = ["Momentum","Value","Growth","Quality","LowVolatility"];
% Groups vector
groups = {cyclical, defensive, sensible, factor};


%% 6.
% Compute the portfolio (Portfolio P), using the Principal Component 
% Analysis, that maximizes its expected return under the following 
% constraints (to be considered all at once):
% • Standard constraints,
% • The volatility of the portfolio has to be equal or less than a target
% volatility of σtgt = 0.1
% You have to use the minimum number of factors that explains more
% than the 90% of the cumulative variance.

ret = tick2ret(prices_2023, 'Method','continuous');
mean_ret = mean(ret);
std_ret = (ret - mean_ret) ./ std(ret);

k = 16;
[factorLoading,factorRetn,latent,r,explained,mu] =...
    pca(std_ret, 'NumComponents',k);
covarFactor = cov(factorRetn);
% coeff -> loadings
% score -> scores matrix
% latent
% explained -> Percentage of total variance explained column vector
% Find cumulative explained variance
TotVar = sum(latent);
explainedVar = latent(1:k)/TotVar;
CumExplainedVar = cumsum(explainedVar);
find(CumExplainedVar >)
%%
h = figure();
subplot(1,2,1)
bar(explainedVar)
title("% Explained Variance");
subplot(1,2,2)
bar(CumExplainedVar)
title("% Cumulative Variance");

